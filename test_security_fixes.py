#!/usr/bin/env python3
"""
Test Security Assessment Fixes
"""

import sys
import os

# Add project root to path
sys.path.insert(0, os.path.dirname(__file__))

def test_security_assessment_fixes():
    """Test the security assessment state management fixes"""
    print("üß™ Testing Security Assessment Fixes")
    print("=" * 50)
    
    try:
        from src.web.app_optimized import SecurityAssessmentState, OptimizedFrameProcessor
        print("‚úÖ SecurityAssessmentState imported successfully")
        
        # Test 1: State Persistence
        print("\n1. Testing State Persistence...")
        state = SecurityAssessmentState()
        
        # Test movement with grace period
        print("   Testing movement detection with grace period...")
        result1 = state.update_movement(True)  # Movement detected
        print(f"   Movement detected: {result1}")
        
        import time
        time.sleep(0.1)  # Small delay
        
        result2 = state.update_movement(False)  # No movement but in grace period
        print(f"   No movement but in grace period: {result2}")
        
        # Test 2: Challenge System
        print("\n2. Testing Challenge System...")
        state.generate_new_challenge()
        challenge_info = state.get_challenge_info()
        print(f"   Challenge generated: {challenge_info['instruction']}")
        
        # Test 3: CNN Consistency
        print("\n3. Testing CNN Consistency...")
        for i in range(25):  # Add consistent high confidence
            state.update_cnn(0.8, True)
        
        cnn_verified = state.cnn_verified
        print(f"   CNN verified after consistent high confidence: {cnn_verified}")
        
        # Test 4: Overall Status
        print("\n4. Testing Overall Security Status...")
        security_status = state.get_security_status()
        print(f"   Methods passed: {security_status['methods_passed']}/3")
        print(f"   Security passed: {security_status['security_passed']}")
        print(f"   Movement verified: {security_status['movement_verified']}")
        print(f"   CNN verified: {security_status['cnn_verified']}")
        print(f"   Landmark verified: {security_status['landmark_verified']}")
        
        # Test 5: Frame Processor Integration
        print("\n5. Testing Frame Processor Integration...")
        processor = OptimizedFrameProcessor()
        test_state = processor.get_security_state("test_session")
        print(f"   Security state created for session: {test_state is not None}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_challenge_types():
    """Test different challenge types"""
    print("\nüéØ Testing Challenge Types")
    print("=" * 30)
    
    try:
        from src.web.app_optimized import SecurityAssessmentState
        
        state = SecurityAssessmentState()
        available_challenges = [c['type'] for c in state.challenges]
        print(f"‚úÖ Available challenges: {available_challenges}")
        
        # Test each challenge type
        for challenge_type in ['blink', 'head_left', 'head_right', 'smile', 'mouth_open']:
            if challenge_type in available_challenges:
                print(f"   ‚úì {challenge_type} challenge available")
            else:
                print(f"   ‚ùå {challenge_type} challenge missing")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Challenge test error: {e}")
        return False

if __name__ == "__main__":
    results = []
    
    results.append(test_security_assessment_fixes())
    results.append(test_challenge_types())
    
    print("\n" + "=" * 50)
    print("üìã TEST RESULTS SUMMARY")
    print("=" * 50)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print(f"üéâ ALL TESTS PASSED ({passed}/{total})")
        print("\n‚úÖ Security Assessment Fixes Applied Successfully!")
        print("\nüîß FIXES IMPLEMENTED:")
        print("1. ‚úÖ State persistence with grace periods")
        print("2. ‚úÖ Challenge system with instructions")
        print("3. ‚úÖ CNN consistency checking")
        print("4. ‚úÖ Movement detection with 3s grace period")
        print("5. ‚úÖ Enhanced UI with challenge display")
        
        print("\nüöÄ READY TO TEST:")
        print("   python launch_optimized.py")
        print("   Open browser: http://localhost:5000")
        print("   Test the improved security assessment!")
        
    else:
        print(f"‚ùå SOME TESTS FAILED ({passed}/{total})")
        print("üîß Check errors above before testing")
